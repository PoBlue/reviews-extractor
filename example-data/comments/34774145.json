[{"category": "nitpick", "content_id": 34774145, "id": 1889059, "user_id": 7560, "body": "These class fields should be final to final immutability. An object is considered immutable if its state cannot change after it is constructed. Maximum reliance on immutable objects is widely accepted as a sound strategy for creating simple, reliable code.\nImmutable objects are particularly useful in concurrent applications. Since they cannot change state, they cannot be corrupted by thread interference or observed in an inconsistent state.\nProgrammers are often reluctant to employ immutable objects, because they worry about the cost of creating a new object as opposed to updating an object in place. The impact of object creation is often overestimated, and can be offset by some of the efficiencies associated with immutable objects. These include decreased overhead due to garbage collection, and the elimination of code needed to protect mutable objects from corruption.", "position": 7, "created_at": "2017-07-04T04:03:05.505Z", "updated_at": "2017-07-04T04:03:05.505Z"}]