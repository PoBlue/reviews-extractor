[{"category": "awesome", "content_id": 29388005, "id": 1748096, "user_id": 4839, "body": "Good Game Over message\n\n![over.PNG](https://udacity-reviews-uploads.s3.amazonaws.com/_attachments/4839/1496439875/over.PNG)", "position": 154, "created_at": "2017-06-02T21:44:43.494Z", "updated_at": "2017-06-02T21:44:43.494Z"}, {"category": "awesome", "content_id": 29388005, "id": 1748092, "user_id": 4839, "body": "Timer works well!", "position": 135, "created_at": "2017-06-02T21:44:22.808Z", "updated_at": "2017-06-02T21:44:22.808Z"}, {"category": "awesome", "content_id": 29388005, "id": 1748060, "user_id": 4839, "body": "Good work keeping `player` on the game canvas", "position": 82, "created_at": "2017-06-02T21:37:32.256Z", "updated_at": "2017-06-02T21:37:32.256Z"}, {"category": "awesome", "content_id": 29388005, "id": 1748051, "user_id": 4839, "body": "You are doing a nice job with Object Oriented Programming and creating prototypes for your `Player` and `Enemy` objects.   But if you want to explore OOP further you should look into *Object Inheritance*.   \n\t\nTo use *Object Inheritance* you\u2019d want to think about the properties that `Enemy` and `Player` have in common, e.g `sprite`, `x`, `y` and create an object with those properties, e.g `Character`.  Then when you create `Player` and `Enemy`, you would extend `Character` with those properties already in place.\n\nTo learn more about OOP and Object Inheritance in JavaScript try these resources:\n* **[Introduction to Object Oriented JavaScript](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Introduction_to_Object-Oriented_JavaScript)**\n* **[Inheritance and the Prototype Chain](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain)**\n* **[Classical Inheritance in JavaScript](http://www.crockford.com/javascript/inheritance.html)** \n* **[OOP In JavaScript: What You NEED to Know](http://javascriptissexy.com/oop-in-javascript-what-you-need-to-know/)**", "position": 59, "created_at": "2017-06-02T21:35:53.512Z", "updated_at": "2017-06-02T21:35:53.512Z"}, {"category": "awesome", "content_id": 29388005, "id": 1748049, "user_id": 4839, "body": "Effective collision detection!\n\nBut for better code organization, this code should be in a separate `Enemy.prototype.checkCollisions` method. Writing small modules of code with a focused and limited purpose makes your code more flexible and easier to follow.", "position": 44, "created_at": "2017-06-02T21:35:34.397Z", "updated_at": "2017-06-02T21:35:34.397Z"}, {"category": "awesome", "content_id": 29388005, "id": 1748047, "user_id": 4839, "body": "Good job randomizing enemy speed", "position": 27, "created_at": "2017-06-02T21:35:19.457Z", "updated_at": "2017-06-02T21:35:19.457Z"}, {"category": "awesome", "content_id": 29388005, "id": 1748042, "user_id": 4839, "body": "Nice `Enemy` constructor!", "position": 18, "created_at": "2017-06-02T21:34:46.617Z", "updated_at": "2017-06-02T21:34:46.617Z"}, {"category": "nitpick", "content_id": 29388005, "id": 1748040, "user_id": 4839, "body": "Good idea to define constants at top of the file.\n\nTo follow best practices, the names of your constants should be all UPPERCASE.  From the **[Udacity Javascript Style Guide](https://udacity.github.io/frontend-nanodegree-styleguide/javascript.html#naming)**\n> In general, `functionNamesLikeThis`,` variableNamesLikeThis`, `ClassNamesLikeThis`, `methodNamesLikeThis`, `CONSTANT_VALUES_LIKE_THIS` and `filenameslikethis.js`. \n\nYou can read more about JavaScript naming conventions here:  \n*  **[Crockford:  Code Conventions for the JavaScript Programming Language ](http://javascript.crockford.com/code.html#names) **\n* **[ Google JavaScript Style Guide > Naming](https://google.github.io/styleguide/jsguide.html#naming)**", "position": 5, "created_at": "2017-06-02T21:33:59.584Z", "updated_at": "2017-06-02T21:33:59.584Z"}, {"category": "nitpick", "content_id": 29388005, "id": 1748037, "user_id": 4839, "body": "It is a good practice to include the `\"use strict;\u201d` tag in your Javascript files.  \n\t\n` 'use strict'`  is helpful because it forces you to  write better code by preventing  functions with bad syntax to execute and requiring you to declare a  variable before using  it.  Sometimes when you implement ` 'use strict'` you may find that your code doesn\u2019t work.  That\u2019s because you have some sloppy coding mistakes that need to be fixed.  It\u2019s like having a very strict coding master sitting on your shoulder making sure that everything is correct before you can move on.   Open Dev Tools, check the console for errors, fix them and move on with cleaner code.\n\nYou can read more here: \n* **[ MDN  > JavaScript  >   Strict Mode]( https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode)**\n*  **[Discussion Forum > Should I add \"use strict\" to  JS file?]( https://discussions.udacity.com/t/should-i-add-use-strict-to-js-file/22396)**", "position": 0, "created_at": "2017-06-02T21:33:26.850Z", "updated_at": "2017-06-02T21:33:26.850Z"}]