[{"category": "critical", "content_id": 27111285, "id": 1696647, "user_id": 397, "body": "Be sure to fix this heading to refer to the correct percentage (1%).", "position": 74, "created_at": "2017-05-22T16:48:23.389Z", "updated_at": "2017-05-22T16:48:23.389Z"}, {"category": "critical", "content_id": 27111285, "id": 1696543, "user_id": 397, "body": "Note that in your view definition you refer to three tables - log, articles, authors - but in your where clause you specify join criteria only between the log and articles tables.  So PostgreSQL will join EVERY row in the authors table to the rows that result from the log-articles join.  Since there are four authors in the authors table, you end up with four times as many rows as you should.  \n\nSometimes this type of join is referred to as a \"cross join\" or \"Cartesian product\".  Take a look at section 7.2.1.1 in the PostgreSQL documentation page below:\n\nhttps://www.postgresql.org/docs/current/static/queries-table-expressions.html\n\nSo it's an easy fix - just add join criteria between the articles and authors table, and you should get the correct answers.  (Hint, Ursula La Multa is first, with slightly over 500,000 views).", "position": 38, "created_at": "2017-05-22T16:12:42.858Z", "updated_at": "2017-05-22T16:46:23.531Z"}, {"category": "nitpick", "content_id": 27111285, "id": 1696630, "user_id": 397, "body": "Since we restrict the output to the first three rows, I would slightly modify the heading of this section to be \"Most popular three articles of all time:\\n\".", "position": 23, "created_at": "2017-05-22T16:45:58.690Z", "updated_at": "2017-05-22T16:45:58.690Z"}, {"category": "critical", "content_id": 27111285, "id": 1696591, "user_id": 397, "body": "Two reasons why this SELECT statement doesn't return the correct results:\n\nCheck the project specifications - we're looking for the days where more than 1% of the view requests resulted in errors, not 2.5%.  That's an easy fix.\n\nSo here is the corrected result from the SELECT statement on lines 62 - 72:\n```\nnews=> select http_failure.date as failure_date,\nnews->                   http_success.date as success_date,\nnews->                   http_success.count as success_count,\nnews->                   http_failure.count as failure_count,\nnews->                   (http_success.count + http_failure.count) as total,\nnews->                   (http_failure.count / (http_success.count +\nnews(>                   http_failure.count)) as failure_rate\nnews->                   from http_failure, http_success\nnews->                   where http_success.date = http_failure.date\nnews->                   and (http_success.count + http_failure.count) * 0.01 <=\nnews->                   http_failure.count;\n failure_date | success_date | success_count | failure_count | total | failure_rate\n--------------+--------------+---------------+---------------+-------+--------------\n 2016-07-17   | 2016-07-17   |         54642 |          1265 | 55907 |            0\n(1 row)\n```\nThis is partially correct - there is only one day, July 17, where the error rate is above 1%.  But note the value returned in the failure_rate column.  PostgreSQL does integer division pretty much the same as how Python does it:\n```\nnews=> select 1265 / (54642 + 1265);\n ?column?\n----------\n        0\n(1 row)\n```\nSo you need to convert some of the values to float; as you would do in Python - the correct value you get from dividing these values is in fact the correct percentage for that day:\n```\nnews=> select 1265.0 / (54642.0 + 1265.0);\n        ?column?\n------------------------\n 0.02262686246802725956\n(1 row)\n```\nI'll leave it to you as to how/what to convert to float, but here is some info that might help:\n\nhttp://www.postgresql-archive.org/GENERAL-dividing-integers-not-producing-decimal-fractions-td1869931.html#a1869932\n\nOne more thing - even though there is only one correct answer to this section, be sure to include an ORDER BY clause in this SELECT statement, to order by the date value in ascending (default) order.", "position": 71, "created_at": "2017-05-22T16:36:26.803Z", "updated_at": "2017-05-22T16:39:08.131Z"}, {"category": "critical", "content_id": 27111285, "id": 1696556, "user_id": 397, "body": "Don't forget to sort these results in descending order, so that the author with the most views appears first.", "position": 40, "created_at": "2017-05-22T16:16:49.892Z", "updated_at": "2017-05-22T16:16:49.892Z"}]