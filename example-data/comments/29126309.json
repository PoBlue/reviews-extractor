[{"category": "nitpick", "content_id": 29126309, "id": 1738576, "user_id": 1456, "body": "Since *results* is a tuple, you could type something like:\n- `for title, numViews in results`\n\n*title* and *numViews* are easier to understand than *result[0]* and *result[1]*. Then your print statement could be:\n- `print(str(title) + \":\" + str(numViews))`", "position": 27, "created_at": "2017-05-31T19:59:03.070Z", "updated_at": "2017-05-31T19:59:18.747Z"}, {"category": "nitpick", "content_id": 29126309, "id": 1738556, "user_id": 1456, "body": "I recommend formatting your error rate to look like a percent, and perhaps round off after 2 or 3 significant digits. You could also format the date. Consider:\n\n- `print(\" {0:%B %d, %Y} - {1:.2f} %  errors\".format(results[0], results[1]*100))`\n\nFor more info on formatting strings, see:\n- https://pyformat.info/", "position": 73, "created_at": "2017-05-31T19:53:44.425Z", "updated_at": "2017-05-31T19:54:15.578Z"}, {"category": "nitpick", "content_id": 29126309, "id": 1738535, "user_id": 1456, "body": "To make it clear what the numbers are referring to, I would change this to:\n- `print str(result[0]) + \": \" + str(result[1]) + \" views\"`", "position": 28, "created_at": "2017-05-31T19:46:54.813Z", "updated_at": "2017-05-31T19:48:14.698Z"}, {"category": "nitpick", "content_id": 29126309, "id": 1738493, "user_id": 1456, "body": "Since you are repeating the same steps in each function (connect to database, execute query, return results) you could refactor your code and abstract these steps into a helper function or [decorator](https://realpython.com/blog/python/primer-on-python-decorators/) so that you don't need to duplicate your code. In the following example, I created helper function that takes a query string as a parameter, and returns the results of the query:\n \n```python\nDBNAME = \"news\"\n\ndef executeQuery(query):\n    \"\"\"executeQuery takes a query string as a parameter. Executes the query and returns the results as a list of tuples.\"\"\"\n    try:\n        db = psycopg2.connect(database=DBNAME)\n        c = db.cursor()\n        c.execute(query)\n        result = c.fetchall()\n        db.close()\n        return result\n    except:\n        print(\"Unable to connect to the database\")\n\n\ndef topArticles():\n    \"\"\"Find the top 3 most popular articles of all time\"\"\"\n    print \"Fetching the 3 articles with the most views...\\n\"\n    query = \"SELECT title, count(*) FROM articles  \\\n            join log ON concat('/article/', articles.slug) = log.path \\\n            GROUP BY title ORDER BY count(*) desc LIMIT 3\"\n    results = executeQuery(query)\n    print \"The 3 articles with the most views are: \"\n    for result in results:\n        print str(result[0]) + \": \" + str(result[1])\n    print \"\\n \"\n```", "position": 22, "created_at": "2017-05-31T19:35:25.774Z", "updated_at": "2017-05-31T19:47:53.385Z"}, {"category": "nitpick", "content_id": 29126309, "id": 1738498, "user_id": 1456, "body": "For blank lines, you can use \"\\n\"\n\nSo for two blank lines you could write:\n- `print \"\\n\"`", "position": 29, "created_at": "2017-05-31T19:37:26.290Z", "updated_at": "2017-05-31T19:47:16.447Z"}, {"category": "awesome", "content_id": 29126309, "id": 1738533, "user_id": 1456, "body": "Great job adding the `__main__` namespace.", "position": 78, "created_at": "2017-05-31T19:45:12.627Z", "updated_at": "2017-05-31T19:45:12.627Z"}, {"category": "awesome", "content_id": 29126309, "id": 1738480, "user_id": 1456, "body": "Great job adding your shebang.", "position": 1, "created_at": "2017-05-31T19:27:54.534Z", "updated_at": "2017-05-31T19:27:54.534Z"}]