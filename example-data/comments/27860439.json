[{"category": "nitpick", "content_id": 27860439, "id": 1701829, "user_id": 7402, "body": "By default, Java makes field variables \"package private\". What this means is any class in the package in which this class resides can access these fields. While this isn't a huge deal for this application, it can make a big difference in more complex applications. This can cause a lot of problems and make things hard to maintain and fix if you are accessing the field from multiple points in the code. Encapsulation(otherwise known as data hiding) is what allows you as a programmer to prevent other classes from directly reaching in and changing the state of your object. There are some times where you want to expose your fields , but unless you're writing a performance heavy application (like a video game), I would recommend always marking them as `private`. Another big exception is if your field is a primitive data type (`int`,` double`, `float`, etc..) and marked `public static final`. Because that variable cannot be changed, and is `static`, it's not that big of a deal to expose it.\n\nMarking your fields as `private` will provide some re-assurance that you haven't changed the variables in some other part of unrelated code resulting in odd behavior and hard to track bugs.\n\n```\nprivate OnRecipeStepClickListener mCallback;\n```\n\nYou can read more about encapsulation here: http://knowledgearray.net/index.php/2016/11/30/theoryjava-encapsulation-concisely-explained-with-java/ and here: http://www.tutorialspoint.com/java/java_encapsulation.htm\nAnd access modifiers here: https://docs.oracle.com/javase/tutorial/java/javaOO/accesscontrol.html", "position": 27, "created_at": "2017-05-23T15:37:14.903Z", "updated_at": "2017-05-23T15:37:14.903Z"}]